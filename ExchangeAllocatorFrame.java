/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package exchangeallocatorframe;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Emiel
 */
public class ExchangeAllocatorFrame extends javax.swing.JFrame {

    /**
     * Creates new form mainFrame
     */
    public ExchangeAllocatorFrame() {
        cookieFile = readCookies();
        readStudies();
        initComponents();
        System.out.println("Study list size = " + studyList.length);
        if (studyList.length == 0) {
            PropertiesFrame frame = new PropertiesFrame();
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setAlwaysOnTop(true);
        frame.setVisible(true);
        }
    }
    static String cookieFile;
    static File lastPath;
    static boolean[] outputs;
    static String studentFile;
    static String uniFile;
    static String studyFile;
    static String fileOutput;
    static String[] studyList;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        StudentFileButton = new javax.swing.JButton();
        UniFileButton = new javax.swing.JButton();
        StudentStudyButton = new javax.swing.JButton();
        studentChoiceLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        studentFileSelected = new javax.swing.JTextField();
        uniFileSelected = new javax.swing.JTextField();
        studyFileSelected = new javax.swing.JTextField();
        outputSelectionLabel = new javax.swing.JLabel();
        warning = new javax.swing.JLabel();
        studentAllocations = new javax.swing.JCheckBox();
        stats = new javax.swing.JCheckBox();
        errorStudents = new javax.swing.JCheckBox();
        backupList = new javax.swing.JCheckBox();
        uniAllocations = new javax.swing.JCheckBox();
        sadStudents = new javax.swing.JCheckBox();
        selectAll = new javax.swing.JButton();
        directory = new javax.swing.JButton();
        directoryField = new javax.swing.JTextField();
        outputSelectorLabel = new javax.swing.JLabel();
        runButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        propertiesButton = new javax.swing.JMenuItem();
        exitButton = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Exchange Allocator - Maastricht University SBE");
        setLocationByPlatform(true);
        setPreferredSize(new java.awt.Dimension(917, 480));
        setResizable(false);

        StudentFileButton.setText("Select");
        StudentFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StudentFileButtonActionPerformed(evt);
            }
        });

        UniFileButton.setText("Select");
        UniFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UniFileButtonActionPerformed(evt);
            }
        });

        StudentStudyButton.setText("Select");
        StudentStudyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StudentStudyButtonActionPerformed(evt);
            }
        });

        studentChoiceLabel.setText("Choose the file containing student choices");

        jLabel1.setText("Choose the file containing universities");

        jLabel2.setText("Choose the file containing student studies");

        studentFileSelected.setText("Nothing selected.");

        uniFileSelected.setText("Nothing selected.");

        studyFileSelected.setText("Nothing selected.");

        outputSelectionLabel.setText("Please select which files you would like to output:");

        warning.setText("Please make sure all information is correct before proceeding");

        studentAllocations.setSelected(true);

        uniAllocations.setSelected(true);

        selectAll.setText("Check All");
        selectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllActionPerformed(evt);
            }
        });

        directory.setText("Select");
        directory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                directoryActionPerformed(evt);
            }
        });

        directoryField.setText("Nothing selected.");
        directoryField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                directoryFieldActionPerformed(evt);
            }
        });

        outputSelectorLabel.setText("Choose the folder where the output should be saved");

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Student Allocation File");

        jLabel4.setText("University Allocation File");

        jLabel5.setText("List of students who remain unassigned");

        jLabel6.setText("Backup list");

        jLabel7.setText("Students with errors reading study tracks");

        jLabel8.setText("System Statistics");

        fileMenu.setText("File");
        fileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuActionPerformed(evt);
            }
        });

        propertiesButton.setText("Properties");
        propertiesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                propertiesButtonActionPerformed(evt);
            }
        });
        fileMenu.add(propertiesButton);

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        fileMenu.add(exitButton);

        mainMenuBar.add(fileMenu);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(studentChoiceLabel)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(UniFileButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(uniFileSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(StudentFileButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(studentFileSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(StudentStudyButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(studyFileSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(selectAll)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(outputSelectionLabel)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(uniAllocations)
                                    .addComponent(sadStudents)
                                    .addComponent(backupList)
                                    .addComponent(errorStudents)
                                    .addComponent(stats)
                                    .addComponent(studentAllocations))))
                        .addGap(806, 806, 806))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(outputSelectorLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(directory)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(warning)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(runButton))
                            .addComponent(directoryField, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(StudentFileButton)
                    .addComponent(studentChoiceLabel)
                    .addComponent(studentFileSelected, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(UniFileButton)
                    .addComponent(uniFileSelected, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(StudentStudyButton)
                    .addComponent(studyFileSelected, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(outputSelectionLabel)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                            .addComponent(studentAllocations)
                                                            .addComponent(jLabel3))
                                                        .addGap(14, 14, 14)
                                                        .addComponent(jLabel4))
                                                    .addComponent(uniAllocations))
                                                .addGap(14, 14, 14)
                                                .addComponent(jLabel5))
                                            .addComponent(sadStudents))
                                        .addGap(14, 14, 14)
                                        .addComponent(jLabel6))
                                    .addComponent(backupList))
                                .addGap(14, 14, 14)
                                .addComponent(jLabel7))
                            .addComponent(errorStudents))
                        .addGap(11, 11, 11)
                        .addComponent(jLabel8))
                    .addComponent(stats))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outputSelectorLabel)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(directoryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(directory)))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(warning)
                    .addComponent(runButton))
                .addContainerGap(155, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void fileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuActionPerformed
    }//GEN-LAST:event_fileMenuActionPerformed

    private void StudentFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StudentFileButtonActionPerformed
        JFileChooser selector = new JFileChooser();
        if (lastPath != null) {
            selector.setCurrentDirectory(lastPath);
        }
        selector.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        selector.setDialogTitle("Please select the file containing student choices");
        if (selector.showDialog(null, "Select") == JFileChooser.APPROVE_OPTION) {
            File file = selector.getSelectedFile();
            if (lastPath != file.getParentFile()) {
                updateCookieFile(file.getParentFile());
            }
            lastPath = file.getParentFile();
            String path = file.getAbsolutePath();
            studentFileSelected.setText(path);
        } else {
            studentFileSelected.setText("Nothing selected.");
        }
    }//GEN-LAST:event_StudentFileButtonActionPerformed

    private void UniFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UniFileButtonActionPerformed
        JFileChooser selector = new JFileChooser();
        if (lastPath != null) {
            selector.setCurrentDirectory(lastPath);
        }
        selector.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        selector.setDialogTitle("Please select the file containing university information");
        if (selector.showDialog(null, "Select") == JFileChooser.APPROVE_OPTION) {
            File file = selector.getSelectedFile();
            if (lastPath != file.getParentFile()) {
                updateCookieFile(file.getParentFile());
            }
            lastPath = file.getParentFile();
            String path = file.getAbsolutePath();
            uniFileSelected.setText(path);
        } else {
            uniFileSelected.setText("Nothing selected.");
        }
    }//GEN-LAST:event_UniFileButtonActionPerformed

    private void StudentStudyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StudentStudyButtonActionPerformed
        JFileChooser selector = new JFileChooser();
        if (lastPath != null) {
            selector.setCurrentDirectory(lastPath);
        }
        selector.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        selector.setDialogTitle("Please select the file containing studies of the students");
        if (selector.showDialog(null, "Select") == JFileChooser.APPROVE_OPTION) {
            File file = selector.getSelectedFile();
            if (lastPath != file.getParentFile()) {
                updateCookieFile(file.getParentFile());
            }
            lastPath = file.getParentFile();
            String path = file.getAbsolutePath();
            studyFileSelected.setText(path);
        } else {
            studyFileSelected.setText("Nothing selected.");
        }
    }//GEN-LAST:event_StudentStudyButtonActionPerformed

    private void directoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_directoryActionPerformed
        JFileChooser selector = new JFileChooser();
        if (lastPath != null) {
            selector.setCurrentDirectory(lastPath);
        }
        selector.setDialogTitle("Please select the directory where you would like to save the files");
        selector.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        selector.setAcceptAllFileFilterUsed(false);
        if (selector.showDialog(null, "Select") == JFileChooser.APPROVE_OPTION) {
            File file = selector.getSelectedFile();
            if (lastPath != file.getParentFile()) {
                updateCookieFile(file.getParentFile());
            }
            lastPath = file.getParentFile();
            String path = file.getAbsolutePath();
            directoryField.setText(path);
        } else {
            directoryField.setText("Nothing selected.");
        }
    }//GEN-LAST:event_directoryActionPerformed

    private void directoryFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_directoryFieldActionPerformed

    }//GEN-LAST:event_directoryFieldActionPerformed

    public static String[] readStudies() {
        try {
            Scanner in = new Scanner(new File(cookieFile));
            int lineCounter = 0;
            String line = "";
            while (in.hasNextLine()) {
                line = in.nextLine();
                if (line.split(";").length == 2) {
                    lineCounter++;
                }
            }
            in.close();
            studyList = new String[lineCounter];
            int index = 0;
            in = new Scanner(new File(cookieFile));
            while (in.hasNextLine()) {
                line = in.nextLine();
                String[] parts = line.split(";");
                if (parts.length == 2) {
                    studyList[index] = line;
                    index++;
                }
            }
            in.close();
        } catch (IOException ex) {
            Logger.getLogger(ErrorStudentsFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex, "Error reading the cookies file.",
                    JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
        return studyList;
    }

    private void selectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllActionPerformed
        boolean b = false;
//        System.out.println(b);
//        System.out.println(stats.isSelected());
        if (!stats.isSelected()) {
            b = true;
        }
        studentAllocations.setSelected(b);
        uniAllocations.setSelected(b);
        sadStudents.setSelected(b);
        backupList.setSelected(b);
        errorStudents.setSelected(b);
        stats.setSelected(b);
    }//GEN-LAST:event_selectAllActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        outputs = new boolean[6];
        outputs[0] = studentAllocations.isSelected();
        outputs[1] = uniAllocations.isSelected();
        outputs[2] = sadStudents.isSelected();
        outputs[3] = backupList.isSelected();
        outputs[4] = errorStudents.isSelected();
        outputs[5] = stats.isSelected();

        studentFile = studentFileSelected.getText();
        uniFile = uniFileSelected.getText();
        studyFile = studyFileSelected.getText();
        fileOutput = directoryField.getText();
        if (fileOutput.toLowerCase().equals("nothing selected.")) {
            fileOutput = "";
            System.out.println("Separator = " + File.separator);
            System.out.println("StudentFile = " + studentFile);
            String[] parts = studentFile.split(File.separator);
            System.out.println("Number of /'s " + parts.length);
            for (int i = 0; i < parts.length - 1; i++) {
                fileOutput += parts[i];
                fileOutput += File.separator;
            }
            System.out.println("fileOutput = " + fileOutput);
        }
        try {
            ExchangeAllocator.run(outputs, studentFile, uniFile, studyFile, fileOutput);
        } catch (IOException ex) {
            Logger.getLogger(ExchangeAllocatorFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex, "Error running the program. Please contact the administrator.",
                    JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
    }//GEN-LAST:event_runButtonActionPerformed

    private void updateCookieFile(File newPath) {
        try {
            BufferedReader reader = new BufferedReader(new FileReader(new File(cookieFile)));
            int counter = 0;
            int pathIndex = 0;
            while (reader.ready()) {
                String line = reader.readLine();
                String[] parts = line.split(":");
                if (parts.length == 2) {
                    pathIndex = counter;
                }
                counter++;
            }
            System.out.println("Counter: " + counter);
            System.out.println("PathIndex: " + pathIndex);
            reader.close();
            String[] lines = new String[counter];
            reader = new BufferedReader(new FileReader(new File(cookieFile)));
            for (int i = 0; i < counter; i++) {
                lines[i] = reader.readLine();
            }
            reader.close();
            BufferedWriter writer = new BufferedWriter(new FileWriter(new File(cookieFile)));
            for (int i = 0; i < counter; i++) {
                if (i == pathIndex) {
                    String[] parts = lines[i].split(":");
                    writer.append(parts[0]);
                    writer.append(":");
                    writer.append(newPath.toString());
                } else {
                    writer.append(lines[i]);
                }
                writer.append("\n");
            }
            writer.close();
        } catch (IOException ex) {
            Logger.getLogger(ExchangeAllocatorFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex, "Error running the program. Please contact the administrator.",
                    JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
    }

    private String readCookies() {
        String directory = System.getProperty("user.home");
        String separator = File.separator;
        String lineSeparator = System.getProperty("line.separator");
        directory += separator;
        directory += "AllocationTool";
        // if the directory does not exist
        if (!new File(directory).exists()) {
            // create it
            new File(directory).mkdirs();
        }
        directory += separator;
        directory += "cookieFile.txt";
        // if the file does not exist
        if (!new File(directory).isFile()) {
            // create it
            try {
                FileWriter fw = new FileWriter(new File(directory));
                fw.append("This is a cookies file for the Exchange Allocator.");
                fw.append(lineSeparator);
                fw.append("Please do not delete this file.");
                fw.append(lineSeparator);
                fw.append(lineSeparator);
                fw.append(lineSeparator);
                fw.append("Path:");
                fw.append(System.getProperty("user.home"));
                fw.append(lineSeparator);
                fw.close();
                System.out.println("Cookie file was created!");

            } catch (IOException ex) {
                Logger.getLogger(ExchangeAllocatorFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, ex, "Error running the program. Please contact the administrator.",
                        JOptionPane.ERROR_MESSAGE);
                System.exit(0);
            }
            // otherwise
        } else {
            try {
                BufferedReader reader = new BufferedReader(new FileReader(new File(directory)));
                while (reader.ready()) {
                    String line = reader.readLine();
                    String[] parts = line.split(":");
                    if (parts.length == 2) {
                        lastPath = new File(parts[1]);
                        break;
                    }
                }
                reader.close();
            } catch (IOException ex) {
                Logger.getLogger(ExchangeAllocatorFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, ex, "Error running the program. Please contact the administrator.",
                        JOptionPane.ERROR_MESSAGE);
                System.exit(0);
            }

            System.out.println("Cookie file already existed");
        }
        return directory;
    }

    private void propertiesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_propertiesButtonActionPerformed
        // TODO add your handling code here:
        PropertiesFrame frame = new PropertiesFrame();
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }//GEN-LAST:event_propertiesButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */

        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    UIManager.setLookAndFeel(
                            UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(ExchangeAllocatorFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, ex, "Error creating the frame. Please try again.",
                            JOptionPane.ERROR_MESSAGE);
                    System.exit(0);
                }
                ExchangeAllocatorFrame frame = new ExchangeAllocatorFrame();
                frame.pack();
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton StudentFileButton;
    private javax.swing.JButton StudentStudyButton;
    private javax.swing.JButton UniFileButton;
    private javax.swing.JCheckBox backupList;
    private javax.swing.JButton directory;
    private javax.swing.JTextField directoryField;
    private javax.swing.JCheckBox errorStudents;
    private javax.swing.JMenuItem exitButton;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JLabel outputSelectionLabel;
    private javax.swing.JLabel outputSelectorLabel;
    private javax.swing.JMenuItem propertiesButton;
    private javax.swing.JButton runButton;
    private javax.swing.JCheckBox sadStudents;
    private javax.swing.JButton selectAll;
    private javax.swing.JCheckBox stats;
    private javax.swing.JCheckBox studentAllocations;
    private javax.swing.JLabel studentChoiceLabel;
    private javax.swing.JTextField studentFileSelected;
    private javax.swing.JTextField studyFileSelected;
    private javax.swing.JCheckBox uniAllocations;
    private javax.swing.JTextField uniFileSelected;
    private javax.swing.JLabel warning;
    // End of variables declaration//GEN-END:variables
}
